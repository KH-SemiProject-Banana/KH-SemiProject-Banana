<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace = "goodsMapper">
  
  
  	<resultMap type="GoodsSell" id="goods_rm">
   
   		<id property="goodsNo" column="GOODS_NO"/>
   		
   		<result property="sellerNo" column="SELLER_NO"></result>
   		<result property="sellerNickname" column="SELLER_NICKNAME"></result>
   		<result property="categoryNo" column="CATEGORY_NO"></result>
   		<result property="categoryName" column="CATEGORY_NAME"></result>   		<result property="viewCount" column="VIEW_COUNT"></result>
   		<result property="sellStatus" column="SELL_STATUS"></result>
   		
   		<result property="title" column="TITLE"></result>
   		<result property="sellPrice" column="SELL_PRICE"></result>
   		<result property="viewCount" column="VIEW_COUNT"></result>
   		<result property="description" column="DESCRIPTION"></result>
   		<result property="refreshedAt" column="REFRESHRED_AT"></result>
   		<result property="createdAt" column="CREATED_AT"></result>
   		<result property="goodsDelFlag" column="GOODS_DEL_FL"></result>
   		<result property="imageNo" column="IMAGE_NO"></result>
   		<result property="imagePath" column="IMAGE_PATH"></result>
   		<result property="orderNo" column="ORDER_NO"></result>
   		
   		<result property="thumbnail" column="THUMBNAIL"></result>
   		<result property="isLike" column="IS_LIKE"></result>
   		<result property="buyerNo" column="BUYER_NO"></result>
   		<result property="sellStatus" column="SELL_STATUS"></result>
   		<result property="memberNickname" column="MEMBER_NICKNAME"></result>
   		
   		

   		
   		
 	</resultMap>
 	 
 	 
	<resultMap type="GoodsImage" id="goodsImage_rm">
		<id property="goodsNo" column="GOODS_NO"/>
   		
   		<result property="imageNo" column="IMAGE_NO"></result>
   		<result property="imagePath" column="IMAGE_PATH"></result>
   		<result property="imageOrder" column="IMG_ORDER"></result>
	</resultMap>
	
	
	

 	 
 	 
 	 <!-- 상품 내용만 등록 -->
 	 <insert id="registerGoods" parameterType="GoodsSell" useGeneratedKeys="true">
 	 
 	 	<selectKey keyProperty="goodsNo" resultType="_int" order="BEFORE">
 	 		SELECT SEQ_GOODS_NO.NEXTVAL FROM DUAL
 	 	</selectKey>
 	 
 	 	INSERT INTO GOODS_SELL	
		VALUES(#{goodsNo}, #{sellerNo}, NULL, #{categoryNo}, #{title}, 
		#{sellPrice}, DEFAULT, #{description}, NULL, DEFAULT, DEFAULT)
 	 </insert>
 	 
 	 

 	 
 	 

 	 
 	 <!-- 상품글 리스트 조회 -->
 	 <select id="selectList">
 	 	SELECT * FROM GOODS_SELL
		WHERE GOODS_DEL_FL = 'N' AND (BUYER_NO IS NULL)
		ORDER BY VIEW_COUNT DESC, REFRESHED_AT DESC, CREATED_AT DESC
 	 </select>
 	 
 	 
 	 <!-- 한 상품의 상세정보 얻어오기 -->
 	 <select id="selectGoods" parameterType="_int" resultMap="goods_rm">
 	 	SELECT GOODS_NO, CATEGORY_NO, TITLE, SELL_PRICE, DESCRIPTION,
		SELLER_NO
		FROM GOODS_SELL S
		WHERE GOODS_NO= #{goodsNo}
 	 </select>
  

	<!-- 한 상품의 이미지리스트 얻어오기 -->
	<select id="selectGoodsImgList" resultMap="goodsImage_rm">
		SELECT IMAGE_NO, IMAGE_PATH, IMG_ORDER
		FROM GOODS_IMAGE gi 
		WHERE GOODS_NO = #{goodsNo}
	</select>



	<!-- 메인페이지 인기상품 + goods에 좋아요 누른여부, 썸네일 -->
	<select id="favoriteGoods" resultMap="goods_rm">
		SELECT GOODS_NO, SELLER_NO, BUYER_NO, CATEGORY_NO, TITLE, 
		SELL_PRICE, VIEW_COUNT, DESCRIPTION, REFRESHED_AT, CREATED_AT, GOODS_DEL_FL, LIKE_COUNT,	
		(SELECT COUNT(*) FROM GOODS_LIKE GL
			WHERE (GL.GOODS_NO = G.GOODS_NO)
			AND (MEMBER_NO = #{memberNo})) IS_LIKE,			
		(SELECT IMAGE_PATH  FROM GOODS_IMAGE GI
		WHERE (G.GOODS_NO = GI.GOODS_NO)
		AND IMG_ORDER = 0) THUMBNAIL
		FROM
		 (SELECT  
		 	CASE  <![CDATA[
			      WHEN SYSDATE - CREATED_AT < 1/24/60
			      THEN FLOOR( (SYSDATE - CREATED_AT) * 24 * 60 * 60 ) || '초 전'
			      WHEN SYSDATE - CREATED_AT < 1/24
			      THEN FLOOR( (SYSDATE - CREATED_AT) * 24 * 60) || '분 전'
			      WHEN SYSDATE - CREATED_AT < 1
			      THEN FLOOR( (SYSDATE - CREATED_AT) * 24) || '시간 전'
			      ELSE TO_CHAR(CREATED_AT, 'YYYY-MM-DD')
			   		END CREATED_AT, ]]>
			CASE  <![CDATA[
			      WHEN SYSDATE - REFRESHED_AT < 1/24/60
			      THEN FLOOR( (SYSDATE - REFRESHED_AT) * 24 * 60 * 60 ) || '초 전'
			      WHEN SYSDATE - REFRESHED_AT < 1/24
			      THEN FLOOR( (SYSDATE - REFRESHED_AT) * 24 * 60) || '분 전'
			      WHEN SYSDATE - REFRESHED_AT < 1
			      THEN FLOOR( (SYSDATE - REFRESHED_AT) * 24) || '시간 전'
			      ELSE TO_CHAR(REFRESHED_AT, 'YYYY-MM-DD')
			   		END REFRESHED_AT, ]]>
			  (SELECT COUNT(*) FROM GOODS_LIKE GL WHERE GL.GOODS_NO = S.GOODS_NO) LIKE_COUNT,
   			GOODS_NO, SELLER_NO, BUYER_NO, CATEGORY_NO, TITLE, 
			SELL_PRICE, VIEW_COUNT, DESCRIPTION, GOODS_DEL_FL
		 		FROM GOODS_SELL S
		 		ORDER BY  LIKE_COUNT DESC) G
 		<![CDATA[ WHERE ROWNUM <= 5 ]]>
	</select>
	
	
	<!-- 메인페이지 최근상품 + goods에 좋아요 누른여부, 썸네일 -->
	<select id="newGoods" parameterType="_int" resultMap="goods_rm">
		SELECT GOODS_NO, SELLER_NO, BUYER_NO, CATEGORY_NO, TITLE, 
		SELL_PRICE, VIEW_COUNT, DESCRIPTION, REFRESHED_AT, CREATED_AT, GOODS_DEL_FL, 
		(SELECT COUNT(*) FROM GOODS_LIKE GL
			WHERE (GL.GOODS_NO = G.GOODS_NO)
			AND (MEMBER_NO = #{memberNo})) IS_LIKE,		
		(SELECT IMAGE_PATH  FROM GOODS_IMAGE GI
		WHERE (G.GOODS_NO = GI.GOODS_NO)
		AND IMG_ORDER = 0) THUMBNAIL
		FROM
		 (SELECT  
		 	CASE  <![CDATA[
			      WHEN SYSDATE - CREATED_AT < 1/24/60
			      THEN FLOOR( (SYSDATE - CREATED_AT) * 24 * 60 * 60 ) || '초 전'
			      WHEN SYSDATE - CREATED_AT < 1/24
			      THEN FLOOR( (SYSDATE - CREATED_AT) * 24 * 60) || '분 전'
			      WHEN SYSDATE - CREATED_AT < 1
			      THEN FLOOR( (SYSDATE - CREATED_AT) * 24) || '시간 전'
			      ELSE TO_CHAR(CREATED_AT, 'YYYY-MM-DD')
			   		END CREATED_AT, ]]>
			CASE  <![CDATA[
			      WHEN SYSDATE - REFRESHED_AT < 1/24/60
			      THEN FLOOR( (SYSDATE - REFRESHED_AT) * 24 * 60 * 60 ) || '초 전'
			      WHEN SYSDATE - REFRESHED_AT < 1/24
			      THEN FLOOR( (SYSDATE - REFRESHED_AT) * 24 * 60) || '분 전'
			      WHEN SYSDATE - REFRESHED_AT < 1
			      THEN FLOOR( (SYSDATE - REFRESHED_AT) * 24) || '시간 전'
			      ELSE TO_CHAR(REFRESHED_AT, 'YYYY-MM-DD')
			   		END REFRESHED_AT, ]]>
   			GOODS_NO, SELLER_NO, BUYER_NO, CATEGORY_NO, TITLE, 
			SELL_PRICE, VIEW_COUNT, DESCRIPTION, GOODS_DEL_FL
		 		FROM GOODS_SELL S
		 		ORDER BY GOODS_NO DESC) G
 		<![CDATA[ WHERE ROWNUM <= 5 ]]>
	</select>
	
	
	<!-- 좋아요 수 증가 -->
	<delete id="goodsLikeDown" parameterType="map">
		DELETE FROM GOODS_LIKE 
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_ = #{memberNo}
	</delete>
  
  
  <!-- db~서버 이미지 동기화를 위해 renameList 조회 -->
  <select id="selectImageList" resultType="string">
  	SELECT IMAGE_PATH FROM GOODS_IMAGE
  </select>
  
  
  <!-- 상품 이미지 등록 -->
  <insert id="insertGoodsImageList">
  	INSERT INTO GOODS_IMAGE 
	SELECT SEQ_IMAGE_NO.NEXTVAL IMAGE_NO, A.* FROM
		
  	<foreach collection="list" item="img" open="(" close=") A"
  	separator="UNION ALL">
  		SELECT 
		#{img.goodsNo} GOODS_NO,
		#{img.imagePath} IMAGE_PATH,
		#{img.imageOrder} IMG_ORDER
		FROM DUAL
  	</foreach>
  	
  </insert>
  
  
  <!-- 상품 삭제 -->
  <update id="goodsDelete" parameterType="_int">
  	UPDATE  GOODS_SELL gs  SET
	GOODS_DEL_FL = 'Y'
	WHERE GOODS_NO = #{goodsNo}
  </update>
  
  <!-- 상품 삭제 복구 -->
  <update id="goodsDeleteBack" parameterType="_int">
  	UPDATE  GOODS_SELL gs  SET
	GOODS_DEL_FL = 'N'
	WHERE GOODS_NO = #{goodsNo}
  </update>
  
  
  <!-- 상품 내용만 수정 -->
  <update id="updateGoodsContent" parameterType="GoodsSell">
  	 UPDATE GOODS_SELL SET
  	 TITLE = #{title},
  	 DESCRIPTION = #{description},
  	 SELL_PRICE = #{sellPrice},
  	 CATEGORY_NO = #{categoryNo}
  	 WHERE GOODS_NO = #{goodsNo}
  	 AND SELLER_NO = #{sellerNo}
  </update>
  
  
  <!-- 상품 이미지 삭제 -->
  <delete id="deleteGoodsImage">
  	DELETE FROM GOODS_IMAGE ${condition}
  </delete>
  
  
  <!-- 상품 이미지만 수정 -->
  <update id="goodsImageUpdate">
  	UPDATE GOODS_IMAGE SET
  	IMAGE_PATH = #{imagePath}
  	WHERE GOODS_NO = #{goodsNo}
  	AND IMG_ORDER = #{imageOrder}
  </update>
  
  
  <!-- 상품이미지 삽입 -->
  <insert id="goodsImageInsert">
  	INSERT INTO GOODS_IMAGE VALUES(
  	SEQ_IMAGE_NO.NEXTVAL, #{goodsNo}, #{imagePath}, #{imageOrder})
  </insert>
  
  
  <!-- 상품 끌어올리기 -->
  <update id="goodsRefresh">
  	UPDATE GOODS_SELL SET
	REFRESHED_AT  = SYSDATE 
	WHERE GOODS_NO = #{goodsNo}
  </update>
  
  
  <!-- 전체 상품 갯수 조회 -->
  <select id="allGoodsCount" resultType = "_int">
  	SELECT COUNT(*) FROM GOODS_SELL
  </select>


 <!-- 특정 상품 목록 조회 -->
 <select id="admin-goodsSearch" parameterType="map" resultMap="goods_rm">
 	SELECT GOODS_NO, SELLER_NO, TITLE, GOODS_DEL_FL, SELL_STATUS, CATEGORY_NO,
	SELLER_NICKNAME, SELL_PRICE,  CREATED_AT, LIKE_COUNT, CATEGORY_NAME, VIEW_COUNT 
	FROM
		(SELECT GOODS_NO, SELLER_NO, TITLE, GOODS_DEL_FL, VIEW_COUNT, CATEGORY_NAME, CATEGORY_NO,
			CASE 
				WHEN BUYER_NO  IS  NULL THEN (SELECT 'Y' FROM DUAL)
				ELSE (SELECT 'N' FROM DUAL) 
			END SELL_STATUS,
		MEMBER_NICKNAME SELLER_NICKNAME,
		SELL_PRICE, 
		TO_CHAR(CREATED_AT, 'YYYY-MM-DD') CREATED_AT, 
		(SELECT COUNT(*) FROM GOODS_LIKE GL WHERE GS.GOODS_NO = GL.GOODS_NO) LIKE_COUNT
		FROM GOODS_SELL GS
		JOIN MEMBER M ON(MEMBER_NO = SELLER_NO)
		JOIN CATEGORY USING(CATEGORY_NO)
		) 
	WHERE GOODS_NO > 0
	
	<if test='query != null and query != ""'>
		<choose>
			<when test='key == "title"'>
				AND TITLE LIKE '%${query}%'
			</when>
			<when test='key == "category"'>
				AND CATEGORY_NAME LIKE '%${query}%'
			</when>
			<when test='key == "sellerNickname"'>
				AND SELLER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>
	</if>

	<if test='isSell != null'>
		<choose>
			<when test='isSell == "yesSell"'>
				AND SELL_STATUS = 'Y'
			</when>
			<when test='isSell == "noSell"'>
				AND SELL_STATUS = 'N'
			</when>
		</choose>
	</if>

	<if test='calanderBefore != ""'>
		AND CREATED_AT >= TO_DATE(#{calanderBefore}, 'YYYY-MM-DD') 
	</if>
	<if test='calanderAfter != ""'>
		<![CDATA[
		AND CREATED_AT <= TO_DATE(#{calanderAfter}, 'YYYY-MM-DD') 
		]]>
	</if>
	
	ORDER BY ${order}

 </select>
 
 
 <!-- 특정 상품 갯수 조회 -->
 <select id="getGoodsCount" parameterType="map" resultType="_int">
  	SELECT COUNT(*)
	FROM
		(SELECT GOODS_NO, SELLER_NO, TITLE, GOODS_DEL_FL, VIEW_COUNT, CATEGORY_NAME,
			CASE 
				WHEN BUYER_NO  IS  NULL THEN (SELECT 'Y' FROM DUAL)
				ELSE (SELECT 'N' FROM DUAL) 
			END SELL_STATUS,
		MEMBER_NICKNAME SELLER_NICKNAME,
		SELL_PRICE, 
		TO_CHAR(CREATED_AT, 'YYYY-MM-DD') CREATED_AT, 
		(SELECT COUNT(*) FROM GOODS_LIKE GL WHERE GS.GOODS_NO = GL.GOODS_NO) LIKE_COUNT
		FROM GOODS_SELL GS
		JOIN MEMBER M ON(MEMBER_NO = SELLER_NO)
		JOIN CATEGORY USING(CATEGORY_NO)
		) 
	WHERE GOODS_NO > 0
	
	<if test='query != null and query != ""'>
		<choose>
			<when test='key == "title"'>
				AND TITLE LIKE '%${query}%'
			</when>
			<when test='key == "category"'>
				AND CATEGORY_NAME LIKE '%${query}%'
			</when>
			<when test='key == "sellerNickname"'>
				AND SELLER_NICKNAME LIKE '%${query}%'
			</when>
		</choose>
	</if>

	<if test='isSell != null'>
		<choose>
			<when test='isSell == "yesSell"'>
				AND SELL_STATUS = 'Y'
			</when>
			<when test='isSell == "noSell"'>
				AND SELL_STATUS = 'N'
			</when>
		</choose>
	</if>

	<if test='calanderBefore != ""'>
		AND CREATED_AT >= TO_DATE(#{calanderBefore}, 'YYYY-MM-DD') 
	</if>
	<if test='calanderAfter != ""'>
		<![CDATA[
		AND CREATED_AT <= TO_DATE(#{calanderAfter}, 'YYYY-MM-DD') 
		]]>
	</if>

 </select>
	<!-- 채팅방 상품정보조회 -->
	<select id="selectProductInfor" resultMap="goods_rm">
	 SELECT GOODS_NO, TITLE, SELL_PRICE, NVL2(BUYER_NO,'판매완료','판매중')SELL_STATUS, IMAGE_PATH,SELLER_NO, MEMBER_NICKNAME
	 FROM GOODS_SELL
	 JOIN GOODS_IMAGE USING(GOODS_NO)
 	 JOIN CHATTING_ROOM USING(GOODS_NO)
 	 JOIN "MEMBER" ON(SELLER_NO = MEMBER_NO)
	 WHERE CHATTING_NO= #{chattingNo}
	</select>
  
</mapper>
